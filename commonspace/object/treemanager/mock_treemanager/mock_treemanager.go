// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/commonspace/object/treemanager (interfaces: TreeManager)
//
// Generated by this command:
//
//	mockgen -destination mock_treemanager/mock_treemanager.go github.com/anyproto/any-sync/commonspace/object/treemanager TreeManager
//

// Package mock_treemanager is a generated GoMock package.
package mock_treemanager

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	objecttree "github.com/anyproto/any-sync/commonspace/object/tree/objecttree"
	treestorage "github.com/anyproto/any-sync/commonspace/object/tree/treestorage"
	gomock "go.uber.org/mock/gomock"
)

// MockTreeManager is a mock of TreeManager interface.
type MockTreeManager struct {
	ctrl     *gomock.Controller
	recorder *MockTreeManagerMockRecorder
	isgomock struct{}
}

// MockTreeManagerMockRecorder is the mock recorder for MockTreeManager.
type MockTreeManagerMockRecorder struct {
	mock *MockTreeManager
}

// NewMockTreeManager creates a new mock instance.
func NewMockTreeManager(ctrl *gomock.Controller) *MockTreeManager {
	mock := &MockTreeManager{ctrl: ctrl}
	mock.recorder = &MockTreeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreeManager) EXPECT() *MockTreeManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTreeManager) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTreeManagerMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTreeManager)(nil).Close), ctx)
}

// DeleteTree mocks base method.
func (m *MockTreeManager) DeleteTree(ctx context.Context, spaceId, treeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTree", ctx, spaceId, treeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTree indicates an expected call of DeleteTree.
func (mr *MockTreeManagerMockRecorder) DeleteTree(ctx, spaceId, treeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTree", reflect.TypeOf((*MockTreeManager)(nil).DeleteTree), ctx, spaceId, treeId)
}

// GetTree mocks base method.
func (m *MockTreeManager) GetTree(ctx context.Context, spaceId, treeId string) (objecttree.ObjectTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", ctx, spaceId, treeId)
	ret0, _ := ret[0].(objecttree.ObjectTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree.
func (mr *MockTreeManagerMockRecorder) GetTree(ctx, spaceId, treeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockTreeManager)(nil).GetTree), ctx, spaceId, treeId)
}

// Init mocks base method.
func (m *MockTreeManager) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTreeManagerMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTreeManager)(nil).Init), a)
}

// MarkTreeDeleted mocks base method.
func (m *MockTreeManager) MarkTreeDeleted(ctx context.Context, spaceId, treeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTreeDeleted", ctx, spaceId, treeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTreeDeleted indicates an expected call of MarkTreeDeleted.
func (mr *MockTreeManagerMockRecorder) MarkTreeDeleted(ctx, spaceId, treeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTreeDeleted", reflect.TypeOf((*MockTreeManager)(nil).MarkTreeDeleted), ctx, spaceId, treeId)
}

// Name mocks base method.
func (m *MockTreeManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTreeManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTreeManager)(nil).Name))
}

// Run mocks base method.
func (m *MockTreeManager) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTreeManagerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTreeManager)(nil).Run), ctx)
}

// ValidateAndPutTree mocks base method.
func (m *MockTreeManager) ValidateAndPutTree(ctx context.Context, spaceId string, payload treestorage.TreeStorageCreatePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndPutTree", ctx, spaceId, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAndPutTree indicates an expected call of ValidateAndPutTree.
func (mr *MockTreeManagerMockRecorder) ValidateAndPutTree(ctx, spaceId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndPutTree", reflect.TypeOf((*MockTreeManager)(nil).ValidateAndPutTree), ctx, spaceId, payload)
}
