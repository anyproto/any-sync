// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/commonspace/object/treesyncer (interfaces: TreeSyncer)
//
// Generated by this command:
//
//	mockgen -destination mock_treesyncer/mock_treesyncer.go github.com/anyproto/any-sync/commonspace/object/treesyncer TreeSyncer
//

// Package mock_treesyncer is a generated GoMock package.
package mock_treesyncer

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	peer "github.com/anyproto/any-sync/net/peer"
	gomock "go.uber.org/mock/gomock"
)

// MockTreeSyncer is a mock of TreeSyncer interface.
type MockTreeSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockTreeSyncerMockRecorder
	isgomock struct{}
}

// MockTreeSyncerMockRecorder is the mock recorder for MockTreeSyncer.
type MockTreeSyncerMockRecorder struct {
	mock *MockTreeSyncer
}

// NewMockTreeSyncer creates a new mock instance.
func NewMockTreeSyncer(ctrl *gomock.Controller) *MockTreeSyncer {
	mock := &MockTreeSyncer{ctrl: ctrl}
	mock.recorder = &MockTreeSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreeSyncer) EXPECT() *MockTreeSyncerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTreeSyncer) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTreeSyncerMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTreeSyncer)(nil).Close), ctx)
}

// Init mocks base method.
func (m *MockTreeSyncer) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTreeSyncerMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTreeSyncer)(nil).Init), a)
}

// Name mocks base method.
func (m *MockTreeSyncer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTreeSyncerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTreeSyncer)(nil).Name))
}

// Run mocks base method.
func (m *MockTreeSyncer) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTreeSyncerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTreeSyncer)(nil).Run), ctx)
}

// ShouldSync mocks base method.
func (m *MockTreeSyncer) ShouldSync(peerId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSync", peerId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSync indicates an expected call of ShouldSync.
func (mr *MockTreeSyncerMockRecorder) ShouldSync(peerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSync", reflect.TypeOf((*MockTreeSyncer)(nil).ShouldSync), peerId)
}

// StartSync mocks base method.
func (m *MockTreeSyncer) StartSync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartSync")
}

// StartSync indicates an expected call of StartSync.
func (mr *MockTreeSyncerMockRecorder) StartSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockTreeSyncer)(nil).StartSync))
}

// StopSync mocks base method.
func (m *MockTreeSyncer) StopSync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSync")
}

// StopSync indicates an expected call of StopSync.
func (mr *MockTreeSyncerMockRecorder) StopSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSync", reflect.TypeOf((*MockTreeSyncer)(nil).StopSync))
}

// SyncAll mocks base method.
func (m *MockTreeSyncer) SyncAll(ctx context.Context, p peer.Peer, existing, missing []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAll", ctx, p, existing, missing)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll.
func (mr *MockTreeSyncerMockRecorder) SyncAll(ctx, p, existing, missing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockTreeSyncer)(nil).SyncAll), ctx, p, existing, missing)
}
