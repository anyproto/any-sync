// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/commonspace/object/keyvalue/kvinterfaces (interfaces: KeyValueService)
//
// Generated by this command:
//
//	mockgen -destination mock_kvinterfaces/mock_kvinterfaces.go github.com/anyproto/any-sync/commonspace/object/keyvalue/kvinterfaces KeyValueService
//

// Package mock_kvinterfaces is a generated GoMock package.
package mock_kvinterfaces

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	keyvaluestorage "github.com/anyproto/any-sync/commonspace/object/keyvalue/keyvaluestorage"
	spacesyncproto "github.com/anyproto/any-sync/commonspace/spacesyncproto"
	peer "github.com/anyproto/any-sync/net/peer"
	gomock "go.uber.org/mock/gomock"
	drpc "storj.io/drpc"
)

// MockKeyValueService is a mock of KeyValueService interface.
type MockKeyValueService struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueServiceMockRecorder
	isgomock struct{}
}

// MockKeyValueServiceMockRecorder is the mock recorder for MockKeyValueService.
type MockKeyValueServiceMockRecorder struct {
	mock *MockKeyValueService
}

// NewMockKeyValueService creates a new mock instance.
func NewMockKeyValueService(ctrl *gomock.Controller) *MockKeyValueService {
	mock := &MockKeyValueService{ctrl: ctrl}
	mock.recorder = &MockKeyValueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueService) EXPECT() *MockKeyValueServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeyValueService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKeyValueServiceMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyValueService)(nil).Close), ctx)
}

// DefaultStore mocks base method.
func (m *MockKeyValueService) DefaultStore() keyvaluestorage.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultStore")
	ret0, _ := ret[0].(keyvaluestorage.Storage)
	return ret0
}

// DefaultStore indicates an expected call of DefaultStore.
func (mr *MockKeyValueServiceMockRecorder) DefaultStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultStore", reflect.TypeOf((*MockKeyValueService)(nil).DefaultStore))
}

// HandleMessage mocks base method.
func (m *MockKeyValueService) HandleMessage(ctx context.Context, msg drpc.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockKeyValueServiceMockRecorder) HandleMessage(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockKeyValueService)(nil).HandleMessage), ctx, msg)
}

// HandleStoreDiffRequest mocks base method.
func (m *MockKeyValueService) HandleStoreDiffRequest(ctx context.Context, req *spacesyncproto.StoreDiffRequest) (*spacesyncproto.StoreDiffResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStoreDiffRequest", ctx, req)
	ret0, _ := ret[0].(*spacesyncproto.StoreDiffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleStoreDiffRequest indicates an expected call of HandleStoreDiffRequest.
func (mr *MockKeyValueServiceMockRecorder) HandleStoreDiffRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStoreDiffRequest", reflect.TypeOf((*MockKeyValueService)(nil).HandleStoreDiffRequest), ctx, req)
}

// HandleStoreElementsRequest mocks base method.
func (m *MockKeyValueService) HandleStoreElementsRequest(ctx context.Context, stream spacesyncproto.DRPCSpaceSync_StoreElementsStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStoreElementsRequest", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStoreElementsRequest indicates an expected call of HandleStoreElementsRequest.
func (mr *MockKeyValueServiceMockRecorder) HandleStoreElementsRequest(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStoreElementsRequest", reflect.TypeOf((*MockKeyValueService)(nil).HandleStoreElementsRequest), ctx, stream)
}

// Init mocks base method.
func (m *MockKeyValueService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockKeyValueServiceMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockKeyValueService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockKeyValueService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockKeyValueServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockKeyValueService)(nil).Name))
}

// Run mocks base method.
func (m *MockKeyValueService) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockKeyValueServiceMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockKeyValueService)(nil).Run), ctx)
}

// SyncWithPeer mocks base method.
func (m *MockKeyValueService) SyncWithPeer(p peer.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncWithPeer", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncWithPeer indicates an expected call of SyncWithPeer.
func (mr *MockKeyValueServiceMockRecorder) SyncWithPeer(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncWithPeer", reflect.TypeOf((*MockKeyValueService)(nil).SyncWithPeer), p)
}
