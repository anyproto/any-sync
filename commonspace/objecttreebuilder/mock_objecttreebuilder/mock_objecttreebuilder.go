// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/commonspace/objecttreebuilder (interfaces: TreeBuilder)
//
// Generated by this command:
//
//	mockgen -destination mock_objecttreebuilder/mock_objecttreebuilder.go github.com/anyproto/any-sync/commonspace/objecttreebuilder TreeBuilder
//
// Package mock_objecttreebuilder is a generated GoMock package.
package mock_objecttreebuilder

import (
	context "context"
	reflect "reflect"

	objecttree "github.com/anyproto/any-sync/commonspace/object/tree/objecttree"
	updatelistener "github.com/anyproto/any-sync/commonspace/object/tree/synctree/updatelistener"
	treestorage "github.com/anyproto/any-sync/commonspace/object/tree/treestorage"
	objecttreebuilder "github.com/anyproto/any-sync/commonspace/objecttreebuilder"
	gomock "go.uber.org/mock/gomock"
)

// MockTreeBuilder is a mock of TreeBuilder interface.
type MockTreeBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTreeBuilderMockRecorder
}

// MockTreeBuilderMockRecorder is the mock recorder for MockTreeBuilder.
type MockTreeBuilderMockRecorder struct {
	mock *MockTreeBuilder
}

// NewMockTreeBuilder creates a new mock instance.
func NewMockTreeBuilder(ctrl *gomock.Controller) *MockTreeBuilder {
	mock := &MockTreeBuilder{ctrl: ctrl}
	mock.recorder = &MockTreeBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreeBuilder) EXPECT() *MockTreeBuilderMockRecorder {
	return m.recorder
}

// BuildHistoryTree mocks base method.
func (m *MockTreeBuilder) BuildHistoryTree(arg0 context.Context, arg1 string, arg2 objecttreebuilder.HistoryTreeOpts) (objecttree.HistoryTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildHistoryTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(objecttree.HistoryTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildHistoryTree indicates an expected call of BuildHistoryTree.
func (mr *MockTreeBuilderMockRecorder) BuildHistoryTree(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildHistoryTree", reflect.TypeOf((*MockTreeBuilder)(nil).BuildHistoryTree), arg0, arg1, arg2)
}

// BuildTree mocks base method.
func (m *MockTreeBuilder) BuildTree(arg0 context.Context, arg1 string, arg2 objecttreebuilder.BuildTreeOpts) (objecttree.ObjectTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(objecttree.ObjectTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildTree indicates an expected call of BuildTree.
func (mr *MockTreeBuilderMockRecorder) BuildTree(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTree", reflect.TypeOf((*MockTreeBuilder)(nil).BuildTree), arg0, arg1, arg2)
}

// CreateTree mocks base method.
func (m *MockTreeBuilder) CreateTree(arg0 context.Context, arg1 objecttree.ObjectTreeCreatePayload) (treestorage.TreeStorageCreatePayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", arg0, arg1)
	ret0, _ := ret[0].(treestorage.TreeStorageCreatePayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockTreeBuilderMockRecorder) CreateTree(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockTreeBuilder)(nil).CreateTree), arg0, arg1)
}

// DeriveTree mocks base method.
func (m *MockTreeBuilder) DeriveTree(arg0 context.Context, arg1 objecttree.ObjectTreeDerivePayload) (treestorage.TreeStorageCreatePayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveTree", arg0, arg1)
	ret0, _ := ret[0].(treestorage.TreeStorageCreatePayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveTree indicates an expected call of DeriveTree.
func (mr *MockTreeBuilderMockRecorder) DeriveTree(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveTree", reflect.TypeOf((*MockTreeBuilder)(nil).DeriveTree), arg0, arg1)
}

// PutTree mocks base method.
func (m *MockTreeBuilder) PutTree(arg0 context.Context, arg1 treestorage.TreeStorageCreatePayload, arg2 updatelistener.UpdateListener) (objecttree.ObjectTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(objecttree.ObjectTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTree indicates an expected call of PutTree.
func (mr *MockTreeBuilderMockRecorder) PutTree(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTree", reflect.TypeOf((*MockTreeBuilder)(nil).PutTree), arg0, arg1, arg2)
}
