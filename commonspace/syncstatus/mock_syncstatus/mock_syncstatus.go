// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/commonspace/syncstatus (interfaces: StatusUpdater)
//
// Generated by this command:
//
//	mockgen -destination mock_syncstatus/mock_syncstatus.go github.com/anyproto/any-sync/commonspace/syncstatus StatusUpdater
//

// Package mock_syncstatus is a generated GoMock package.
package mock_syncstatus

import (
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusUpdater is a mock of StatusUpdater interface.
type MockStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUpdaterMockRecorder
	isgomock struct{}
}

// MockStatusUpdaterMockRecorder is the mock recorder for MockStatusUpdater.
type MockStatusUpdaterMockRecorder struct {
	mock *MockStatusUpdater
}

// NewMockStatusUpdater creates a new mock instance.
func NewMockStatusUpdater(ctrl *gomock.Controller) *MockStatusUpdater {
	mock := &MockStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUpdater) EXPECT() *MockStatusUpdaterMockRecorder {
	return m.recorder
}

// HeadsApply mocks base method.
func (m *MockStatusUpdater) HeadsApply(senderId, treeId string, heads []string, allAdded bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HeadsApply", senderId, treeId, heads, allAdded)
}

// HeadsApply indicates an expected call of HeadsApply.
func (mr *MockStatusUpdaterMockRecorder) HeadsApply(senderId, treeId, heads, allAdded any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadsApply", reflect.TypeOf((*MockStatusUpdater)(nil).HeadsApply), senderId, treeId, heads, allAdded)
}

// HeadsChange mocks base method.
func (m *MockStatusUpdater) HeadsChange(treeId string, heads []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HeadsChange", treeId, heads)
}

// HeadsChange indicates an expected call of HeadsChange.
func (mr *MockStatusUpdaterMockRecorder) HeadsChange(treeId, heads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadsChange", reflect.TypeOf((*MockStatusUpdater)(nil).HeadsChange), treeId, heads)
}

// HeadsReceive mocks base method.
func (m *MockStatusUpdater) HeadsReceive(senderId, treeId string, heads []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HeadsReceive", senderId, treeId, heads)
}

// HeadsReceive indicates an expected call of HeadsReceive.
func (mr *MockStatusUpdaterMockRecorder) HeadsReceive(senderId, treeId, heads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadsReceive", reflect.TypeOf((*MockStatusUpdater)(nil).HeadsReceive), senderId, treeId, heads)
}

// Init mocks base method.
func (m *MockStatusUpdater) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStatusUpdaterMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStatusUpdater)(nil).Init), a)
}

// Name mocks base method.
func (m *MockStatusUpdater) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStatusUpdaterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStatusUpdater)(nil).Name))
}

// ObjectReceive mocks base method.
func (m *MockStatusUpdater) ObjectReceive(senderId, treeId string, heads []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObjectReceive", senderId, treeId, heads)
}

// ObjectReceive indicates an expected call of ObjectReceive.
func (mr *MockStatusUpdaterMockRecorder) ObjectReceive(senderId, treeId, heads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectReceive", reflect.TypeOf((*MockStatusUpdater)(nil).ObjectReceive), senderId, treeId, heads)
}
