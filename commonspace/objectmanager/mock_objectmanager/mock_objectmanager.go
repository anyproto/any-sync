// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/commonspace/objectmanager (interfaces: ObjectManager)
//
// Generated by this command:
//
//	mockgen -destination mock_objectmanager/mock_objectmanager.go github.com/anyproto/any-sync/commonspace/objectmanager ObjectManager
//
// Package mock_objectmanager is a generated GoMock package.
package mock_objectmanager

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	syncobjectgetter "github.com/anyproto/any-sync/commonspace/object/syncobjectgetter"
	objecttree "github.com/anyproto/any-sync/commonspace/object/tree/objecttree"
	treestorage "github.com/anyproto/any-sync/commonspace/object/tree/treestorage"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectManager is a mock of ObjectManager interface.
type MockObjectManager struct {
	ctrl     *gomock.Controller
	recorder *MockObjectManagerMockRecorder
}

// MockObjectManagerMockRecorder is the mock recorder for MockObjectManager.
type MockObjectManagerMockRecorder struct {
	mock *MockObjectManager
}

// NewMockObjectManager creates a new mock instance.
func NewMockObjectManager(ctrl *gomock.Controller) *MockObjectManager {
	mock := &MockObjectManager{ctrl: ctrl}
	mock.recorder = &MockObjectManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectManager) EXPECT() *MockObjectManagerMockRecorder {
	return m.recorder
}

// AddObject mocks base method.
func (m *MockObjectManager) AddObject(arg0 syncobjectgetter.SyncObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddObject", arg0)
}

// AddObject indicates an expected call of AddObject.
func (mr *MockObjectManagerMockRecorder) AddObject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObject", reflect.TypeOf((*MockObjectManager)(nil).AddObject), arg0)
}

// Close mocks base method.
func (m *MockObjectManager) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockObjectManagerMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockObjectManager)(nil).Close), arg0)
}

// DeleteTree mocks base method.
func (m *MockObjectManager) DeleteTree(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTree indicates an expected call of DeleteTree.
func (mr *MockObjectManagerMockRecorder) DeleteTree(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTree", reflect.TypeOf((*MockObjectManager)(nil).DeleteTree), arg0, arg1, arg2)
}

// GetObject mocks base method.
func (m *MockObjectManager) GetObject(arg0 context.Context, arg1 string) (syncobjectgetter.SyncObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1)
	ret0, _ := ret[0].(syncobjectgetter.SyncObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectManagerMockRecorder) GetObject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectManager)(nil).GetObject), arg0, arg1)
}

// GetTree mocks base method.
func (m *MockObjectManager) GetTree(arg0 context.Context, arg1, arg2 string) (objecttree.ObjectTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(objecttree.ObjectTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree.
func (mr *MockObjectManagerMockRecorder) GetTree(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockObjectManager)(nil).GetTree), arg0, arg1, arg2)
}

// Init mocks base method.
func (m *MockObjectManager) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockObjectManagerMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockObjectManager)(nil).Init), arg0)
}

// MarkTreeDeleted mocks base method.
func (m *MockObjectManager) MarkTreeDeleted(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTreeDeleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTreeDeleted indicates an expected call of MarkTreeDeleted.
func (mr *MockObjectManagerMockRecorder) MarkTreeDeleted(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTreeDeleted", reflect.TypeOf((*MockObjectManager)(nil).MarkTreeDeleted), arg0, arg1, arg2)
}

// Name mocks base method.
func (m *MockObjectManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockObjectManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockObjectManager)(nil).Name))
}

// Run mocks base method.
func (m *MockObjectManager) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockObjectManagerMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockObjectManager)(nil).Run), arg0)
}

// ValidateAndPutTree mocks base method.
func (m *MockObjectManager) ValidateAndPutTree(arg0 context.Context, arg1 string, arg2 treestorage.TreeStorageCreatePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndPutTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAndPutTree indicates an expected call of ValidateAndPutTree.
func (mr *MockObjectManagerMockRecorder) ValidateAndPutTree(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndPutTree", reflect.TypeOf((*MockObjectManager)(nil).ValidateAndPutTree), arg0, arg1, arg2)
}
