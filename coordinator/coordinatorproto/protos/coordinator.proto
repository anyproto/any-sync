syntax = "proto3";
package coordinator;

option go_package = "coordinator/coordinatorproto";

service Coordinator {
  // SpaceSign signs a space creation operation
  rpc SpaceSign(SpaceSignRequest) returns (SpaceSignResponse);

  // SpaceStatusCheck checks the status of space and tells if it is deleted or not
  rpc SpaceStatusCheck(SpaceStatusCheckRequest) returns (SpaceStatusCheckResponse);

  // SpaceStatusCheckMany checks the statuses of spaces and tells if they are deleted or not
  rpc SpaceStatusCheckMany(SpaceStatusCheckManyRequest) returns (SpaceStatusCheckManyResponse);

  // SpaceStatusChange changes the status of space - Deprecated
  rpc SpaceStatusChange(SpaceStatusChangeRequest) returns (SpaceStatusChangeResponse);

  // SpaceMakeShareable makes space shareable
  rpc SpaceMakeShareable(SpaceMakeShareableRequest) returns (SpaceMakeShareableResponse);

  // SpaceMakeUnshareable marks space unshareable
  rpc SpaceMakeUnshareable(SpaceMakeUnshareableRequest) returns (SpaceMakeUnshareableResponse);

  // NetworkConfiguration retrieves the latest network configuration
  rpc NetworkConfiguration(NetworkConfigurationRequest) returns (NetworkConfigurationResponse);

  // DeletionLog gets the latest deletion log records
  rpc DeletionLog(DeletionLogRequest) returns (DeletionLogResponse);

  // SpaceDelete deletes a space
  rpc SpaceDelete(SpaceDeleteRequest) returns (SpaceDeleteResponse);

  // AccountDelete deletes an account
  rpc AccountDelete(AccountDeleteRequest) returns (AccountDeleteResponse);

  // AccountRevertDeletion reverts an account deletion
  rpc AccountRevertDeletion(AccountRevertDeletionRequest) returns (AccountRevertDeletionResponse);

  // AclAddRecord adds a new record to acl log. Works only with any-sync-node
  rpc AclAddRecord(AclAddRecordRequest) returns (AclAddRecordResponse);
  // AclGetRecords gets acl records
  rpc AclGetRecords(AclGetRecordsRequest) returns (AclGetRecordsResponse);
  // AccountLimitsSet sets limits to the account. Can be used only by a network config member
  rpc AccountLimitsSet(AccountLimitsSetRequest) returns (AccountLimitsSetResponse);
  
  // EventLog gets the latest event log records
  rpc AclEventLog(AclEventLogRequest) returns (AclEventLogResponse);

  // AclUploadInvite uploads invite binary data to the filenodes
  rpc AclUploadInvite(AclUploadInviteRequest) returns (AclUploadInviteResponse);
}

message SpaceSignRequest {
  // SpaceId is the id of the signed space
  string spaceId = 1;
  // Header is the header of the signed space
  bytes header = 2;
  // OldIdentity is the old identity of the space owner
  bytes oldIdentity = 3;
  // NewIdentitySignature is the new identity signed by the old one
  bytes newIdentitySignature = 4;
  // ForceRequest if true, forces the creating space receipt even if the space is deleted before
  bool forceRequest = 5;
}

enum ErrorCodes {
  Unexpected = 0;
  SpaceDeleted = 1;
  SpaceDeletionPending = 2;
  SpaceCreated = 3;
  SpaceNotExists = 4;
  SpaceLimitReached = 5;
  AccountDeleted = 6;
  Forbidden = 7;
  AclHeadIsMissing = 8;
  AclNonEmpty = 9;
  SpaceNotShareable = 10;
  ErrorOffset = 300;
}

enum SpaceStatus {
  SpaceStatusCreated = 0;
  SpaceStatusPendingDeletion = 1;
  SpaceStatusDeletionStarted = 2;
  SpaceStatusDeleted = 3;
  SpaceStatusNotExists = 4;
}

enum SpacePermissions {
  SpacePermissionsUnknown = 0;
  SpacePermissionsOwner = 1;
}

message SpaceLimits {
  uint32 readMembers = 1;
  uint32 writeMembers = 2;
}

message SpaceStatusPayload {
  SpaceStatus status = 1;
  int64 deletionTimestamp = 2;
  SpacePermissions permissions = 3;
  SpaceLimits limits = 4;
  bool isShared = 5;
}

message SpaceSignResponse {
  SpaceReceiptWithSignature receipt = 1;
}

// SpaceReceiptWithSignature contains protobuf encoded receipt and its signature
message SpaceReceiptWithSignature {
  bytes spaceReceiptPayload = 1;
  bytes signature = 2;
}

// SpaceReceipt contains permission to SpacePush operation
message SpaceReceipt {
  // SpaceId is the identifier of space
  string spaceId = 1;
  // PeerId of receipt requester
  string peerId = 2;
  // AccountIdentity is an identity of a space owner
  bytes accountIdentity = 3;
  // NetworkId is the id of a network where the receipt is issued
  string networkId = 4;
  // ValidUntil is a unix-timestamp with a deadline time of receipt validity
  uint64 validUntil = 5;
}

// SpaceStatusCheckRequest contains the spaceId of requested space
message SpaceStatusCheckRequest {
  string spaceId = 1;
}

// SpaceStatusCheckResponse contains the current status of space
message SpaceStatusCheckResponse {
  SpaceStatusPayload payload = 1;
}

// SpaceStatusCheckManyRequest contains the spaceIds of requested spaces
message SpaceStatusCheckManyRequest {
  repeated string spaceIds = 1;
}

// SpaceStatusCheckManyResponse contains the current statuses of spaces
message SpaceStatusCheckManyResponse {
  repeated SpaceStatusPayload payloads = 1;
  AccountLimits accountLimits = 2;
}

// AccountLimits describes account level limit
message AccountLimits {
  uint32 sharedSpacesLimit = 1;
}


// SpaceStatusChangeRequest contains the deletionChange if we want to delete space, or it is empty otherwise
message SpaceStatusChangeRequest {
  string spaceId = 1;
  string deletionPayloadId = 2;
  bytes deletionPayload = 3;
  DeletionPayloadType deletionPayloadType = 4;
}

// SpaceStatusChangeResponse contains changed status of space
message SpaceStatusChangeResponse {
  SpaceStatusPayload payload = 1;
}

message SpaceMakeShareableRequest {
    string spaceId = 1;
}

message SpaceMakeShareableResponse {}

message SpaceMakeUnshareableRequest {
  string spaceId = 1;
  string aclHead = 2;
}

message SpaceMakeUnshareableResponse {}

// NetworkConfigurationRequest contains currenId of the client configuration, it can be empty
message NetworkConfigurationRequest {
  // currenId of the client configuration
  // if the currentId is equal to the latest configuration id then the response will not contain a nodes list
  string currentId = 1;
}

// NetworkConfigurationResponse contains list of nodes
message NetworkConfigurationResponse {
  // id of current configuration
  string configurationId = 1;
  // network id
  string networkId = 2;
  // nodes list - it will be empty if the client's currentId is equal configurationId
  repeated Node nodes = 3;
  // unix timestamp of the creation time of configuration
  uint64 creationTimeUnix = 4;
}

// NodeType determines the type of API that a node supports
enum NodeType {
  // TreeAPI supports space/tree sync api
  TreeAPI = 0;
  // FileAPI support file api
  FileAPI = 1;
  // CoordinatorAPI supports coordinator api
  CoordinatorAPI = 2;
  // ConsensusAPI supports consensus api
  ConsensusAPI = 3;
  // NamingNodeAPI supports naming node api
  // (see any-ns-node repository)
  NamingNodeAPI = 4;
  // PaymentProcessingAPI supports payment processing api
  // (see any-pp-node repository)
  PaymentProcessingAPI = 5;
}

// DeletionChangeType determines the type of deletion payload
enum DeletionPayloadType {
  Tree = 0;
  Confirm = 1;
  Account = 2;
}

// Node describes one node in the network
message Node {
  // peerId - it's a peer identifier (libp2p format string) so it's an encoded publicKey
  string peerId = 1;
  // list of node addresses
  repeated string addresses = 2;
  // list of supported APIs
  repeated NodeType types = 3;
}

// DeletionConfirmPayloadWithSignature contains protobuf encoded deletion payload and its signature
message DeletionConfirmPayloadWithSignature {
  bytes deletionPayload = 1;
  bytes signature = 2;
}

// DeletionConfirmPayload contains payload for deletion confirmation
message DeletionConfirmPayload {
  // SpaceId is the identifier of space
  string spaceId = 1;
  // PeerId of receipt requester
  string peerId = 2;
  // AccountIdentity is an identity of a space owner
  bytes accountIdentity = 3;
  // NetworkId is the id of a network where the deletion was requested
  string networkId = 4;
  // Timestamp is a timestamp when the deletion was requested
  int64 timestamp = 5;
}

message DeletionLogRequest {
  // AfterId is the last known logId to request records after this id. If it is empty will be returned a list from the beginning.
  string afterId = 1;
  // Limit is a desired record count in response
  uint32 limit = 2;
}


message DeletionLogResponse {
  // DeletionLogRecord list of records, if there are no new records will be empty
  repeated DeletionLogRecord records = 1;
  // HasMore indicates if there are records left
  bool hasMore = 2;
}

message DeletionLogRecord {
  // Id is a record id
  string id = 1;
  // SpaceId is a space identifier
  string spaceId = 2;
  // DeletionLogRecordStatus is a space status
  DeletionLogRecordStatus status = 3;
  // Timestamp is a unixtimestamp of record creation
  int64 timestamp = 4;
  // FileGroup is a key of group for file nodes
  string fileGroup = 5;
}

enum DeletionLogRecordStatus {
  // Ok means space should operate in a normal
  Ok = 0;
  // RemovePrepare means space prepared to remove, sync should be disabled
  RemovePrepare = 1;
  // Remove means space should be removed
  Remove = 2;
}

// SpaceDeleteRequest contains the deletion confirmation for the space to be deleted
message SpaceDeleteRequest {
  string spaceId = 1;
  string deletionPayloadId = 2;
  bytes deletionPayload = 3;
  int64 deletionDuration = 4;
}

// SpaceDeleteResponse contains timestamp when the space is finally deleted
message SpaceDeleteResponse {
  int64 toBeDeletedTimestamp = 1;
}

// AccountDeleteRequest contains payload for account deletion
message AccountDeleteRequest {
  string deletionPayloadId = 1;
  bytes deletionPayload = 2;
}

// AccountDeletionConfirmPayload contains payload for deletion confirmation
message AccountDeletionConfirmPayload {
  // PeerId of receipt requester
  string peerId = 1;
  // AccountIdentity is an identity of a space owner
  bytes accountIdentity = 2;
  // NetworkId is the id of a network where the deletion was requested
  string networkId = 3;
  // Timestamp is a timestamp when the deletion was requested
  int64 timestamp = 4;
}

// AccountDeleteResponse contains timestamp when the account is finally deleted
message AccountDeleteResponse {
  int64 toBeDeletedTimestamp = 1;
}

// AccountRevertDeletionRequest is a request to revert an account deletion
message AccountRevertDeletionRequest {
}

// AccountRevertDeletionResponse is an empty response confirming that the deletion is reverted
message AccountRevertDeletionResponse {
}

// AclAddRecordRequest contains marshaled consensusproto.RawRecord
message AclAddRecordRequest {
  string spaceId = 1;
  bytes payload = 2;
}

// AclAddRecordResponse contains created record id and marshaled consensusproto.RawRecord
message AclAddRecordResponse {
  string recordId = 1;
  bytes payload = 2;
}

// AclGetRecordsRequest can optionally contain the last known aclHead, the server will return only new records or an empty list if there are no new records.
// If aclHead is not provided the whole list will be returned.
message AclGetRecordsRequest {
  string spaceId = 1;
  string aclHead = 2;
}

// AclGetRecordsResponse contains list of marshaled consensusproto.RawRecordWithId
message AclGetRecordsResponse {
  repeated bytes records = 1;
}

message AccountLimitsSetRequest {
  string identity = 1;
  string reason = 2;
  uint64 fileStorageLimitBytes = 3;
  uint32 spaceMembersRead = 4;
  uint32 spaceMembersWrite = 5;
  uint32 sharedSpacesLimit = 6;
}

message AccountLimitsSetResponse {}

message AclEventLogRequest {
  string accountIdentity = 1;
  // AfterId is the last known logId to request records after this id. If it is empty will be returned a list from the beginning.
  string afterId = 2;
  // Limit is a desired record count in response
  uint32 limit = 3;
}

message AclEventLogResponse {
  // AclEventLogRecord list of records, if there are no new records will be empty
  repeated AclEventLogRecord records = 1;
  // HasMore indicates if there are records left
  bool hasMore = 2;
}

enum AclEventLogRecordType {
  RecordTypeSpaceReceipt = 0;
  RecordTypeSpaceShared = 1;
  RecordTypeSpaceUnshared = 2;
  RecordTypeSpaceAclAddRecord = 3;
}

message AclEventLogRecord {
  // Id is a record id
  string id = 1;
  // SpaceId is a space identifier
  string spaceId = 2;
  // Timestamp is a unixtimestamp of record creation
  int64 timestamp = 3;
  // Type of current event
  AclEventLogRecordType type = 4;
  // only for RecordTypeSpaceAclAddRecord
  string aclChangeId = 5; 
}

message AclUploadInviteRequest {
  bytes cid = 1;
  bytes data = 2;
}

message AclUploadInviteResponse {}