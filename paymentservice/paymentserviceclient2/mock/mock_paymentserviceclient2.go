// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 (interfaces: AnyPpClientService2)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_paymentserviceclient2.go -package=mock_paymentserviceclient2 github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 AnyPpClientService2
//

// Package mock_paymentserviceclient2 is a generated GoMock package.
package mock_paymentserviceclient2

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	paymentserviceproto "github.com/anyproto/any-sync/paymentservice/paymentserviceproto"
	gomock "go.uber.org/mock/gomock"
)

// MockAnyPpClientService2 is a mock of AnyPpClientService2 interface.
type MockAnyPpClientService2 struct {
	ctrl     *gomock.Controller
	recorder *MockAnyPpClientService2MockRecorder
}

// MockAnyPpClientService2MockRecorder is the mock recorder for MockAnyPpClientService2.
type MockAnyPpClientService2MockRecorder struct {
	mock *MockAnyPpClientService2
}

// NewMockAnyPpClientService2 creates a new mock instance.
func NewMockAnyPpClientService2(ctrl *gomock.Controller) *MockAnyPpClientService2 {
	mock := &MockAnyPpClientService2{ctrl: ctrl}
	mock.recorder = &MockAnyPpClientService2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyPpClientService2) EXPECT() *MockAnyPpClientService2MockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockAnyPpClientService2) GetStatus(arg0 context.Context, arg1 *paymentserviceproto.Membership2_GetStatusRequest) (*paymentserviceproto.Membership2_GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAnyPpClientService2MockRecorder) GetStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAnyPpClientService2)(nil).GetStatus), arg0, arg1)
}

// Init mocks base method.
func (m *MockAnyPpClientService2) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAnyPpClientService2MockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnyPpClientService2)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockAnyPpClientService2) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAnyPpClientService2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAnyPpClientService2)(nil).Name))
}

// ProductAllocateToSpace mocks base method.
func (m *MockAnyPpClientService2) ProductAllocateToSpace(arg0 context.Context, arg1 *paymentserviceproto.Membership2_ProductAllocateToSpaceRequest) (*paymentserviceproto.Membership2_ProductAllocateToSpaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductAllocateToSpace", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_ProductAllocateToSpaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAllocateToSpace indicates an expected call of ProductAllocateToSpace.
func (mr *MockAnyPpClientService2MockRecorder) ProductAllocateToSpace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAllocateToSpace", reflect.TypeOf((*MockAnyPpClientService2)(nil).ProductAllocateToSpace), arg0, arg1)
}

// StoreCartCheckoutGenerate mocks base method.
func (m *MockAnyPpClientService2) StoreCartCheckoutGenerate(arg0 context.Context, arg1 *paymentserviceproto.Membership2_StoreCartCheckoutGenerateRequest) (*paymentserviceproto.Membership2_StoreCartCheckoutGenerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartCheckoutGenerate", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartCheckoutGenerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartCheckoutGenerate indicates an expected call of StoreCartCheckoutGenerate.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartCheckoutGenerate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartCheckoutGenerate", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartCheckoutGenerate), arg0, arg1)
}

// StoreCartGet mocks base method.
func (m *MockAnyPpClientService2) StoreCartGet(arg0 context.Context, arg1 *paymentserviceproto.Membership2_StoreCartGetRequest) (*paymentserviceproto.Membership2_StoreCartGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartGet", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartGet indicates an expected call of StoreCartGet.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartGet", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartGet), arg0, arg1)
}

// StoreCartProductAdd mocks base method.
func (m *MockAnyPpClientService2) StoreCartProductAdd(arg0 context.Context, arg1 *paymentserviceproto.Membership2_StoreCartProductAddRequest) (*paymentserviceproto.Membership2_StoreCartProductAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartProductAdd", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartProductAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartProductAdd indicates an expected call of StoreCartProductAdd.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartProductAdd(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartProductAdd", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartProductAdd), arg0, arg1)
}

// StoreCartProductRemove mocks base method.
func (m *MockAnyPpClientService2) StoreCartProductRemove(arg0 context.Context, arg1 *paymentserviceproto.Membership2_StoreCartProductRemoveRequest) (*paymentserviceproto.Membership2_StoreCartProductRemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartProductRemove", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartProductRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartProductRemove indicates an expected call of StoreCartProductRemove.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartProductRemove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartProductRemove", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartProductRemove), arg0, arg1)
}

// StoreCartPromocodeApply mocks base method.
func (m *MockAnyPpClientService2) StoreCartPromocodeApply(arg0 context.Context, arg1 *paymentserviceproto.Membership2_StoreCartPromocodeApplyRequest) (*paymentserviceproto.Membership2_StoreCartPromocodeApplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartPromocodeApply", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartPromocodeApplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartPromocodeApply indicates an expected call of StoreCartPromocodeApply.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartPromocodeApply(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartPromocodeApply", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartPromocodeApply), arg0, arg1)
}

// StoreProductsEnumerate mocks base method.
func (m *MockAnyPpClientService2) StoreProductsEnumerate(arg0 context.Context, arg1 *paymentserviceproto.Membership2_StoreProductsEnumerateRequest) (*paymentserviceproto.Membership2_StoreProductsEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProductsEnumerate", arg0, arg1)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreProductsEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreProductsEnumerate indicates an expected call of StoreProductsEnumerate.
func (mr *MockAnyPpClientService2MockRecorder) StoreProductsEnumerate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProductsEnumerate", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreProductsEnumerate), arg0, arg1)
}
