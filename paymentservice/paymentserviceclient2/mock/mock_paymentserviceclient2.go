// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 (interfaces: AnyPpClientServiceV2)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_paymentserviceclient2.go -package=mock_paymentserviceclient2 github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 AnyPpClientServiceV2
//

// Package mock_paymentserviceclient2 is a generated GoMock package.
package mock_paymentserviceclient2

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	paymentserviceproto "github.com/anyproto/any-sync/paymentservice/paymentserviceproto"
	gomock "go.uber.org/mock/gomock"
)

// MockAnyPpClientServiceV2 is a mock of AnyPpClientServiceV2 interface.
type MockAnyPpClientServiceV2 struct {
	ctrl     *gomock.Controller
	recorder *MockAnyPpClientServiceV2MockRecorder
	isgomock struct{}
}

// MockAnyPpClientServiceV2MockRecorder is the mock recorder for MockAnyPpClientServiceV2.
type MockAnyPpClientServiceV2MockRecorder struct {
	mock *MockAnyPpClientServiceV2
}

// NewMockAnyPpClientServiceV2 creates a new mock instance.
func NewMockAnyPpClientServiceV2(ctrl *gomock.Controller) *MockAnyPpClientServiceV2 {
	mock := &MockAnyPpClientServiceV2{ctrl: ctrl}
	mock.recorder = &MockAnyPpClientServiceV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyPpClientServiceV2) EXPECT() *MockAnyPpClientServiceV2MockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockAnyPpClientServiceV2) GetProducts(ctx context.Context, in *paymentserviceproto.MembershipV2_GetProductsRequest) (*paymentserviceproto.MembershipV2_GetProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.MembershipV2_GetProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockAnyPpClientServiceV2MockRecorder) GetProducts(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockAnyPpClientServiceV2)(nil).GetProducts), ctx, in)
}

// GetStatus mocks base method.
func (m *MockAnyPpClientServiceV2) GetStatus(ctx context.Context, in *paymentserviceproto.MembershipV2_GetStatusRequest) (*paymentserviceproto.MembershipV2_GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.MembershipV2_GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAnyPpClientServiceV2MockRecorder) GetStatus(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAnyPpClientServiceV2)(nil).GetStatus), ctx, in)
}

// Init mocks base method.
func (m *MockAnyPpClientServiceV2) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAnyPpClientServiceV2MockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnyPpClientServiceV2)(nil).Init), a)
}

// Name mocks base method.
func (m *MockAnyPpClientServiceV2) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAnyPpClientServiceV2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAnyPpClientServiceV2)(nil).Name))
}

// WebAuth mocks base method.
func (m *MockAnyPpClientServiceV2) WebAuth(ctx context.Context, in *paymentserviceproto.MembershipV2_WebAuthRequest) (*paymentserviceproto.MembershipV2_WebAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebAuth", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.MembershipV2_WebAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebAuth indicates an expected call of WebAuth.
func (mr *MockAnyPpClientServiceV2MockRecorder) WebAuth(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebAuth", reflect.TypeOf((*MockAnyPpClientServiceV2)(nil).WebAuth), ctx, in)
}
