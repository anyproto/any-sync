// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 (interfaces: AnyPpClientService2)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_paymentserviceclient2.go -package=mock_paymentserviceclient2 github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 AnyPpClientService2
//

// Package mock_paymentserviceclient2 is a generated GoMock package.
package mock_paymentserviceclient2

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	paymentserviceproto "github.com/anyproto/any-sync/paymentservice/paymentserviceproto"
	gomock "go.uber.org/mock/gomock"
)

// MockAnyPpClientService2 is a mock of AnyPpClientService2 interface.
type MockAnyPpClientService2 struct {
	ctrl     *gomock.Controller
	recorder *MockAnyPpClientService2MockRecorder
	isgomock struct{}
}

// MockAnyPpClientService2MockRecorder is the mock recorder for MockAnyPpClientService2.
type MockAnyPpClientService2MockRecorder struct {
	mock *MockAnyPpClientService2
}

// NewMockAnyPpClientService2 creates a new mock instance.
func NewMockAnyPpClientService2(ctrl *gomock.Controller) *MockAnyPpClientService2 {
	mock := &MockAnyPpClientService2{ctrl: ctrl}
	mock.recorder = &MockAnyPpClientService2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyPpClientService2) EXPECT() *MockAnyPpClientService2MockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockAnyPpClientService2) GetStatus(ctx context.Context, in *paymentserviceproto.Membership2_GetStatusRequest) (*paymentserviceproto.Membership2_GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAnyPpClientService2MockRecorder) GetStatus(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAnyPpClientService2)(nil).GetStatus), ctx, in)
}

// Init mocks base method.
func (m *MockAnyPpClientService2) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAnyPpClientService2MockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnyPpClientService2)(nil).Init), a)
}

// Name mocks base method.
func (m *MockAnyPpClientService2) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAnyPpClientService2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAnyPpClientService2)(nil).Name))
}

// ProductsEnumerate mocks base method.
func (m *MockAnyPpClientService2) ProductsEnumerate(ctx context.Context, in *paymentserviceproto.Membership2_StoreProductsEnumerateRequest) (*paymentserviceproto.Membership2_StoreProductsEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductsEnumerate", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreProductsEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsEnumerate indicates an expected call of ProductsEnumerate.
func (mr *MockAnyPpClientService2MockRecorder) ProductsEnumerate(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsEnumerate", reflect.TypeOf((*MockAnyPpClientService2)(nil).ProductsEnumerate), ctx, in)
}

// StoreCartCheckoutGenerate mocks base method.
func (m *MockAnyPpClientService2) StoreCartCheckoutGenerate(ctx context.Context, in *paymentserviceproto.Membership2_StoreCartCheckoutRequest) (*paymentserviceproto.Membership2_StoreCartCheckoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartCheckoutGenerate", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartCheckoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartCheckoutGenerate indicates an expected call of StoreCartCheckoutGenerate.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartCheckoutGenerate(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartCheckoutGenerate", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartCheckoutGenerate), ctx, in)
}

// StoreCartClear mocks base method.
func (m *MockAnyPpClientService2) StoreCartClear(ctx context.Context, in *paymentserviceproto.Membership2_StoreCartClearRequest) (*paymentserviceproto.Membership2_StoreCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartClear", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartClear indicates an expected call of StoreCartClear.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartClear(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartClear", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartClear), ctx, in)
}

// StoreCartGet mocks base method.
func (m *MockAnyPpClientService2) StoreCartGet(ctx context.Context, in *paymentserviceproto.Membership2_StoreCartGetRequest) (*paymentserviceproto.Membership2_StoreCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartGet", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartGet indicates an expected call of StoreCartGet.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartGet(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartGet", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartGet), ctx, in)
}

// StoreCartPromocodeApply mocks base method.
func (m *MockAnyPpClientService2) StoreCartPromocodeApply(ctx context.Context, in *paymentserviceproto.Membership2_StoreCartPromocodeApplyRequest) (*paymentserviceproto.Membership2_StoreCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartPromocodeApply", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartPromocodeApply indicates an expected call of StoreCartPromocodeApply.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartPromocodeApply(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartPromocodeApply", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartPromocodeApply), ctx, in)
}

// StoreCartUpdate mocks base method.
func (m *MockAnyPpClientService2) StoreCartUpdate(ctx context.Context, in *paymentserviceproto.Membership2_StoreCartUpdateRequest) (*paymentserviceproto.Membership2_StoreCartUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCartUpdate", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_StoreCartUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCartUpdate indicates an expected call of StoreCartUpdate.
func (mr *MockAnyPpClientService2MockRecorder) StoreCartUpdate(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCartUpdate", reflect.TypeOf((*MockAnyPpClientService2)(nil).StoreCartUpdate), ctx, in)
}
