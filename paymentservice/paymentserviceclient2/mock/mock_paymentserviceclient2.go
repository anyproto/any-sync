// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 (interfaces: AnyPpClientService2)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_paymentserviceclient2.go -package=mock_paymentserviceclient2 github.com/anyproto/any-sync/paymentservice/paymentserviceclient2 AnyPpClientService2
//

// Package mock_paymentserviceclient2 is a generated GoMock package.
package mock_paymentserviceclient2

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	paymentserviceproto "github.com/anyproto/any-sync/paymentservice/paymentserviceproto"
	gomock "go.uber.org/mock/gomock"
)

// MockAnyPpClientService2 is a mock of AnyPpClientService2 interface.
type MockAnyPpClientService2 struct {
	ctrl     *gomock.Controller
	recorder *MockAnyPpClientService2MockRecorder
	isgomock struct{}
}

// MockAnyPpClientService2MockRecorder is the mock recorder for MockAnyPpClientService2.
type MockAnyPpClientService2MockRecorder struct {
	mock *MockAnyPpClientService2
}

// NewMockAnyPpClientService2 creates a new mock instance.
func NewMockAnyPpClientService2(ctrl *gomock.Controller) *MockAnyPpClientService2 {
	mock := &MockAnyPpClientService2{ctrl: ctrl}
	mock.recorder = &MockAnyPpClientService2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyPpClientService2) EXPECT() *MockAnyPpClientService2MockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockAnyPpClientService2) GetProducts(ctx context.Context, in *paymentserviceproto.Membership2_GetProductsRequest) (*paymentserviceproto.Membership2_GetProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_GetProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockAnyPpClientService2MockRecorder) GetProducts(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockAnyPpClientService2)(nil).GetProducts), ctx, in)
}

// GetStatus mocks base method.
func (m *MockAnyPpClientService2) GetStatus(ctx context.Context, in *paymentserviceproto.Membership2_GetStatusRequest) (*paymentserviceproto.Membership2_GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAnyPpClientService2MockRecorder) GetStatus(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAnyPpClientService2)(nil).GetStatus), ctx, in)
}

// Init mocks base method.
func (m *MockAnyPpClientService2) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAnyPpClientService2MockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnyPpClientService2)(nil).Init), a)
}

// Name mocks base method.
func (m *MockAnyPpClientService2) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAnyPpClientService2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAnyPpClientService2)(nil).Name))
}

// WebAuth mocks base method.
func (m *MockAnyPpClientService2) WebAuth(ctx context.Context, in *paymentserviceproto.Membership2_WebAuthRequest) (*paymentserviceproto.Membership2_WebAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebAuth", ctx, in)
	ret0, _ := ret[0].(*paymentserviceproto.Membership2_WebAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebAuth indicates an expected call of WebAuth.
func (mr *MockAnyPpClientService2MockRecorder) WebAuth(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebAuth", reflect.TypeOf((*MockAnyPpClientService2)(nil).WebAuth), ctx, in)
}
