// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paymentservice/paymentserviceproto/protos/paymentservice_tiers.proto

package paymentserviceproto

import (
	fmt "fmt"
	proto "github.com/anyproto/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PeriodType int32

const (
	PeriodType_PeriodTypeUnknown   PeriodType = 0
	PeriodType_PeriodTypeUnlimited PeriodType = 1
	PeriodType_PeriodTypeDays      PeriodType = 2
	PeriodType_PeriodTypeWeeks     PeriodType = 3
	PeriodType_PeriodTypeMonths    PeriodType = 4
	PeriodType_PeriodTypeYears     PeriodType = 5
)

var PeriodType_name = map[int32]string{
	0: "PeriodTypeUnknown",
	1: "PeriodTypeUnlimited",
	2: "PeriodTypeDays",
	3: "PeriodTypeWeeks",
	4: "PeriodTypeMonths",
	5: "PeriodTypeYears",
}

var PeriodType_value = map[string]int32{
	"PeriodTypeUnknown":   0,
	"PeriodTypeUnlimited": 1,
	"PeriodTypeDays":      2,
	"PeriodTypeWeeks":     3,
	"PeriodTypeMonths":    4,
	"PeriodTypeYears":     5,
}

func (x PeriodType) String() string {
	return proto.EnumName(PeriodType_name, int32(x))
}

func (PeriodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_597ac3048c641f44, []int{0}
}

type Feature struct {
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_597ac3048c641f44, []int{0}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Feature) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GetTiersRequest struct {
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyId string `protobuf:"bytes,1,opt,name=ownerAnyId,proto3" json:"ownerAnyId,omitempty"`
	Locale     string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (m *GetTiersRequest) Reset()         { *m = GetTiersRequest{} }
func (m *GetTiersRequest) String() string { return proto.CompactTextString(m) }
func (*GetTiersRequest) ProtoMessage()    {}
func (*GetTiersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_597ac3048c641f44, []int{1}
}
func (m *GetTiersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTiersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTiersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTiersRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *GetTiersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTiersRequest.Merge(m, src)
}
func (m *GetTiersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTiersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTiersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTiersRequest proto.InternalMessageInfo

func (m *GetTiersRequest) GetOwnerAnyId() string {
	if m != nil {
		return m.OwnerAnyId
	}
	return ""
}

func (m *GetTiersRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

type GetTiersRequestSigned struct {
	// GetTiersRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// this is payload signed with payload.ownerAnyID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GetTiersRequestSigned) Reset()         { *m = GetTiersRequestSigned{} }
func (m *GetTiersRequestSigned) String() string { return proto.CompactTextString(m) }
func (*GetTiersRequestSigned) ProtoMessage()    {}
func (*GetTiersRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_597ac3048c641f44, []int{2}
}
func (m *GetTiersRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTiersRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTiersRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTiersRequestSigned) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *GetTiersRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTiersRequestSigned.Merge(m, src)
}
func (m *GetTiersRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *GetTiersRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTiersRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_GetTiersRequestSigned proto.InternalMessageInfo

func (m *GetTiersRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetTiersRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TierData struct {
	// this is a unique ID of the tier
	// you should hardcode this in your app and provide icon, graphics, etc for each tier
	// (even for old/historical/inactive/hidden tiers)
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// localazied name of the tier
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// just a short technical description
	// you don't have to use it, you can use your own UI-friendly texts
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// can you buy it (ON ALL PLATFORMS, without clarification)?
	IsActive bool `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
	// is this tier for debugging only?
	IsTest bool `protobuf:"varint,5,opt,name=isTest,proto3" json:"isTest,omitempty"`
	// hidden tiers are only visible once user got them
	IsHiddenTier bool `protobuf:"varint,6,opt,name=isHiddenTier,proto3" json:"isHiddenTier,omitempty"`
	// how long is the period of the subscription
	PeriodType PeriodType `protobuf:"varint,7,opt,name=periodType,proto3,enum=PeriodType" json:"periodType,omitempty"`
	// i.e. "5 days" or "3 years"
	PeriodValue uint32 `protobuf:"varint,8,opt,name=periodValue,proto3" json:"periodValue,omitempty"`
	// this one is a price we use ONLY on Stripe platform
	PriceStripeUsdCents uint32 `protobuf:"varint,9,opt,name=priceStripeUsdCents,proto3" json:"priceStripeUsdCents,omitempty"`
	// number of ANY NS names that this tier includes
	// (not counted as a "feature" and not in the features list)
	AnyNamesCountIncluded uint32 `protobuf:"varint,10,opt,name=anyNamesCountIncluded,proto3" json:"anyNamesCountIncluded,omitempty"`
	// somename.any - len of 8
	AnyNameMinLength uint32 `protobuf:"varint,11,opt,name=anyNameMinLength,proto3" json:"anyNameMinLength,omitempty"`
	// each tier has a set of features
	Features []*Feature `protobuf:"bytes,12,rep,name=features,proto3" json:"features,omitempty"`
	// green, blue, red, purple or custom color in string format #ff00ff
	ColorStr string `protobuf:"bytes,13,opt,name=colorStr,proto3" json:"colorStr,omitempty"`
	// Stripe platform-specific data:
	StripeProductId string `protobuf:"bytes,14,opt,name=stripeProductId,proto3" json:"stripeProductId,omitempty"`
	StripeManageUrl string `protobuf:"bytes,15,opt,name=stripeManageUrl,proto3" json:"stripeManageUrl,omitempty"`
	// iOS platform-specific data:
	IosProductId string `protobuf:"bytes,16,opt,name=iosProductId,proto3" json:"iosProductId,omitempty"`
	IosManageUrl string `protobuf:"bytes,17,opt,name=iosManageUrl,proto3" json:"iosManageUrl,omitempty"`
	// Android platform-specific data:
	AndroidProductId string `protobuf:"bytes,18,opt,name=androidProductId,proto3" json:"androidProductId,omitempty"`
	AndroidManageUrl string `protobuf:"bytes,19,opt,name=androidManageUrl,proto3" json:"androidManageUrl,omitempty"`
	// something like "limited offer", etc
	Offer string `protobuf:"bytes,20,opt,name=offer,proto3" json:"offer,omitempty"`
}

func (m *TierData) Reset()         { *m = TierData{} }
func (m *TierData) String() string { return proto.CompactTextString(m) }
func (*TierData) ProtoMessage()    {}
func (*TierData) Descriptor() ([]byte, []int) {
	return fileDescriptor_597ac3048c641f44, []int{3}
}
func (m *TierData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TierData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TierData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TierData) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *TierData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierData.Merge(m, src)
}
func (m *TierData) XXX_Size() int {
	return m.Size()
}
func (m *TierData) XXX_DiscardUnknown() {
	xxx_messageInfo_TierData.DiscardUnknown(m)
}

var xxx_messageInfo_TierData proto.InternalMessageInfo

func (m *TierData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TierData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TierData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TierData) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *TierData) GetIsTest() bool {
	if m != nil {
		return m.IsTest
	}
	return false
}

func (m *TierData) GetIsHiddenTier() bool {
	if m != nil {
		return m.IsHiddenTier
	}
	return false
}

func (m *TierData) GetPeriodType() PeriodType {
	if m != nil {
		return m.PeriodType
	}
	return PeriodType_PeriodTypeUnknown
}

func (m *TierData) GetPeriodValue() uint32 {
	if m != nil {
		return m.PeriodValue
	}
	return 0
}

func (m *TierData) GetPriceStripeUsdCents() uint32 {
	if m != nil {
		return m.PriceStripeUsdCents
	}
	return 0
}

func (m *TierData) GetAnyNamesCountIncluded() uint32 {
	if m != nil {
		return m.AnyNamesCountIncluded
	}
	return 0
}

func (m *TierData) GetAnyNameMinLength() uint32 {
	if m != nil {
		return m.AnyNameMinLength
	}
	return 0
}

func (m *TierData) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *TierData) GetColorStr() string {
	if m != nil {
		return m.ColorStr
	}
	return ""
}

func (m *TierData) GetStripeProductId() string {
	if m != nil {
		return m.StripeProductId
	}
	return ""
}

func (m *TierData) GetStripeManageUrl() string {
	if m != nil {
		return m.StripeManageUrl
	}
	return ""
}

func (m *TierData) GetIosProductId() string {
	if m != nil {
		return m.IosProductId
	}
	return ""
}

func (m *TierData) GetIosManageUrl() string {
	if m != nil {
		return m.IosManageUrl
	}
	return ""
}

func (m *TierData) GetAndroidProductId() string {
	if m != nil {
		return m.AndroidProductId
	}
	return ""
}

func (m *TierData) GetAndroidManageUrl() string {
	if m != nil {
		return m.AndroidManageUrl
	}
	return ""
}

func (m *TierData) GetOffer() string {
	if m != nil {
		return m.Offer
	}
	return ""
}

type GetTiersResponse struct {
	// list of all available tiers
	Tiers []*TierData `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (m *GetTiersResponse) Reset()         { *m = GetTiersResponse{} }
func (m *GetTiersResponse) String() string { return proto.CompactTextString(m) }
func (*GetTiersResponse) ProtoMessage()    {}
func (*GetTiersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_597ac3048c641f44, []int{4}
}
func (m *GetTiersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTiersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTiersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTiersResponse) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *GetTiersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTiersResponse.Merge(m, src)
}
func (m *GetTiersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTiersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTiersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTiersResponse proto.InternalMessageInfo

func (m *GetTiersResponse) GetTiers() []*TierData {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func init() {
	proto.RegisterEnum("PeriodType", PeriodType_name, PeriodType_value)
	proto.RegisterType((*Feature)(nil), "Feature")
	proto.RegisterType((*GetTiersRequest)(nil), "GetTiersRequest")
	proto.RegisterType((*GetTiersRequestSigned)(nil), "GetTiersRequestSigned")
	proto.RegisterType((*TierData)(nil), "TierData")
	proto.RegisterType((*GetTiersResponse)(nil), "GetTiersResponse")
}

func init() {
	proto.RegisterFile("paymentservice/paymentserviceproto/protos/paymentservice_tiers.proto", fileDescriptor_597ac3048c641f44)
}

var fileDescriptor_597ac3048c641f44 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x5f, 0x4f, 0x1a, 0x4b,
	0x14, 0x67, 0x51, 0x14, 0x0e, 0x08, 0xeb, 0xa0, 0xf7, 0x4e, 0x6e, 0x6e, 0xb8, 0x84, 0xdc, 0x07,
	0xa2, 0x09, 0x36, 0xda, 0xc7, 0xbe, 0x58, 0x4d, 0x5b, 0x92, 0xda, 0x9a, 0x55, 0xdb, 0xb4, 0x2f,
	0xcd, 0x74, 0xe7, 0x88, 0x13, 0x97, 0x99, 0xed, 0xcc, 0xa0, 0xe1, 0x5b, 0xf8, 0xb1, 0xfa, 0xe8,
	0x5b, 0xfb, 0xd8, 0xe8, 0x17, 0x69, 0x76, 0x40, 0x66, 0x41, 0x93, 0xbe, 0x00, 0xbf, 0x3f, 0xe7,
	0x97, 0x73, 0xce, 0x9e, 0x05, 0x0e, 0x53, 0x36, 0x1e, 0xa2, 0xb4, 0x06, 0xf5, 0x95, 0x88, 0x71,
	0x67, 0x1e, 0xa6, 0x5a, 0x59, 0xb5, 0xe3, 0x3e, 0xcd, 0x82, 0xf4, 0xc5, 0x0a, 0xd4, 0xa6, 0xe7,
	0xb4, 0xce, 0x36, 0xac, 0xbe, 0x42, 0x66, 0x47, 0x1a, 0x49, 0x1b, 0xaa, 0x1c, 0x4d, 0xac, 0x45,
	0x6a, 0x85, 0x92, 0x34, 0x68, 0x07, 0xdd, 0x4a, 0x94, 0xa7, 0x3a, 0x7d, 0x68, 0xbc, 0x46, 0x7b,
	0x9a, 0x95, 0x47, 0xf8, 0x6d, 0x84, 0xc6, 0x92, 0x16, 0x80, 0xba, 0x96, 0xa8, 0xf7, 0xe5, 0xb8,
	0xcf, 0xa7, 0x35, 0x39, 0x86, 0xfc, 0x05, 0x2b, 0x89, 0x8a, 0x59, 0x82, 0xb4, 0xe8, 0xb4, 0x29,
	0xea, 0xbc, 0x87, 0xcd, 0x85, 0xa8, 0x13, 0x31, 0x90, 0xc8, 0x09, 0x85, 0xd5, 0x94, 0x8d, 0x13,
	0xc5, 0x26, 0x69, 0xb5, 0xe8, 0x01, 0x92, 0x7f, 0xa1, 0x62, 0xc4, 0x40, 0xba, 0x66, 0x5d, 0x5a,
	0x2d, 0xf2, 0x44, 0xe7, 0x47, 0x09, 0xca, 0x59, 0xdc, 0x21, 0xb3, 0x8c, 0xd4, 0xa1, 0x28, 0x26,
	0xf5, 0x6b, 0x51, 0x51, 0x70, 0x42, 0x60, 0x59, 0xb2, 0xe1, 0x43, 0x0f, 0xee, 0xf7, 0xe2, 0xb8,
	0x4b, 0x8f, 0xc6, 0x25, 0xff, 0x40, 0x59, 0x98, 0xfd, 0xd8, 0x8a, 0x2b, 0xa4, 0xcb, 0xed, 0xa0,
	0x5b, 0x8e, 0x66, 0x38, 0x9b, 0x4b, 0x98, 0x53, 0x34, 0x96, 0x96, 0x9c, 0x32, 0x45, 0xa4, 0x03,
	0x35, 0x61, 0xde, 0x08, 0xce, 0x51, 0x66, 0xdd, 0xd0, 0x15, 0xa7, 0xce, 0x71, 0x64, 0x1b, 0x20,
	0x45, 0x2d, 0x14, 0x3f, 0x1d, 0xa7, 0x48, 0x57, 0xdb, 0x41, 0xb7, 0xbe, 0x5b, 0xed, 0x1d, 0xcf,
	0xa8, 0x28, 0x27, 0x67, 0x6d, 0x4e, 0xd0, 0x07, 0x96, 0x8c, 0x90, 0x96, 0xdd, 0x4c, 0x79, 0x8a,
	0x3c, 0x83, 0x66, 0xaa, 0x45, 0x8c, 0x27, 0x56, 0x8b, 0x14, 0xcf, 0x0c, 0x3f, 0xc8, 0x9e, 0x35,
	0xad, 0x38, 0xe7, 0x53, 0x12, 0x79, 0x0e, 0x9b, 0x4c, 0x8e, 0xdf, 0xb1, 0x21, 0x9a, 0x03, 0x35,
	0x92, 0xb6, 0x2f, 0xe3, 0x64, 0xc4, 0x91, 0x53, 0x70, 0x35, 0x4f, 0x8b, 0x64, 0x0b, 0xc2, 0xa9,
	0x70, 0x24, 0xe4, 0x5b, 0x94, 0x03, 0x7b, 0x41, 0xab, 0xae, 0xe0, 0x11, 0x4f, 0xfe, 0x87, 0xf2,
	0xf9, 0xe4, 0xac, 0x0c, 0xad, 0xb5, 0x97, 0xba, 0xd5, 0xdd, 0x72, 0x6f, 0x7a, 0x67, 0xd1, 0x4c,
	0xc9, 0x16, 0x1c, 0xab, 0x44, 0xe9, 0x13, 0xab, 0xe9, 0x9a, 0xdb, 0xff, 0x0c, 0x93, 0x2e, 0x34,
	0x8c, 0xeb, 0xfa, 0x58, 0x2b, 0x3e, 0x8a, 0x6d, 0x9f, 0xd3, 0xba, 0xb3, 0x2c, 0xd2, 0xde, 0x79,
	0xc4, 0x24, 0x1b, 0xe0, 0x99, 0x4e, 0x68, 0x23, 0xef, 0x9c, 0xd1, 0xee, 0xe1, 0x28, 0xe3, 0x03,
	0x43, 0x67, 0x9b, 0xe3, 0xa6, 0x1e, 0x1f, 0xb5, 0x3e, 0xf3, 0xf8, 0x1c, 0xb7, 0x09, 0xae, 0x95,
	0xe0, 0x3e, 0x8b, 0x38, 0xdf, 0x23, 0x3e, 0xe7, 0xf5, 0x99, 0xcd, 0x39, 0xaf, 0xcf, 0xdd, 0x80,
	0x92, 0x3a, 0x3f, 0x47, 0x4d, 0x37, 0x9c, 0x61, 0x02, 0x3a, 0x7b, 0x10, 0xfa, 0x57, 0xc5, 0xa4,
	0x4a, 0x1a, 0x24, 0xff, 0x41, 0xc9, 0xbd, 0xc5, 0x34, 0x70, 0xcb, 0xad, 0xf4, 0x1e, 0x4e, 0x3f,
	0x9a, 0xf0, 0x5b, 0x37, 0x01, 0x80, 0xbf, 0x28, 0xb2, 0x09, 0xeb, 0x1e, 0x9d, 0xc9, 0x4b, 0xa9,
	0xae, 0x65, 0x58, 0x20, 0x7f, 0x43, 0x33, 0x4f, 0x27, 0x62, 0x28, 0x2c, 0xf2, 0x30, 0x20, 0x04,
	0xea, 0x5e, 0x38, 0x64, 0x63, 0x13, 0x16, 0x49, 0x13, 0x1a, 0x9e, 0xfb, 0x88, 0x78, 0x69, 0xc2,
	0x25, 0xb2, 0x01, 0xa1, 0x27, 0x8f, 0x94, 0xb4, 0x17, 0x26, 0x5c, 0x9e, 0xb7, 0x7e, 0x42, 0xa6,
	0x4d, 0x58, 0x7a, 0xf9, 0xe2, 0xfb, 0x5d, 0x2b, 0xb8, 0xbd, 0x6b, 0x05, 0xbf, 0xee, 0x5a, 0xc1,
	0xcd, 0x7d, 0xab, 0x70, 0x7b, 0xdf, 0x2a, 0xfc, 0xbc, 0x6f, 0x15, 0x3e, 0x77, 0xfe, 0xfc, 0x57,
	0xf6, 0x75, 0xc5, 0x7d, 0xed, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xbe, 0x42, 0x45, 0xf7,
	0x04, 0x00, 0x00,
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTiersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTiersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTiersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAnyId) > 0 {
		i -= len(m.OwnerAnyId)
		copy(dAtA[i:], m.OwnerAnyId)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.OwnerAnyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTiersRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTiersRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTiersRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TierData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TierData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TierData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offer) > 0 {
		i -= len(m.Offer)
		copy(dAtA[i:], m.Offer)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Offer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AndroidManageUrl) > 0 {
		i -= len(m.AndroidManageUrl)
		copy(dAtA[i:], m.AndroidManageUrl)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.AndroidManageUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.AndroidProductId) > 0 {
		i -= len(m.AndroidProductId)
		copy(dAtA[i:], m.AndroidProductId)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.AndroidProductId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.IosManageUrl) > 0 {
		i -= len(m.IosManageUrl)
		copy(dAtA[i:], m.IosManageUrl)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.IosManageUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.IosProductId) > 0 {
		i -= len(m.IosProductId)
		copy(dAtA[i:], m.IosProductId)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.IosProductId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.StripeManageUrl) > 0 {
		i -= len(m.StripeManageUrl)
		copy(dAtA[i:], m.StripeManageUrl)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.StripeManageUrl)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.StripeProductId) > 0 {
		i -= len(m.StripeProductId)
		copy(dAtA[i:], m.StripeProductId)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.StripeProductId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ColorStr) > 0 {
		i -= len(m.ColorStr)
		copy(dAtA[i:], m.ColorStr)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.ColorStr)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.AnyNameMinLength != 0 {
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(m.AnyNameMinLength))
		i--
		dAtA[i] = 0x58
	}
	if m.AnyNamesCountIncluded != 0 {
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(m.AnyNamesCountIncluded))
		i--
		dAtA[i] = 0x50
	}
	if m.PriceStripeUsdCents != 0 {
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(m.PriceStripeUsdCents))
		i--
		dAtA[i] = 0x48
	}
	if m.PeriodValue != 0 {
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(m.PeriodValue))
		i--
		dAtA[i] = 0x40
	}
	if m.PeriodType != 0 {
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(m.PeriodType))
		i--
		dAtA[i] = 0x38
	}
	if m.IsHiddenTier {
		i--
		if m.IsHiddenTier {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsTest {
		i--
		if m.IsTest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTiersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTiersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTiersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPaymentserviceTiers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPaymentserviceTiers(dAtA []byte, offset int, v uint64) int {
	offset -= sovPaymentserviceTiers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	return n
}

func (m *GetTiersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAnyId)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	return n
}

func (m *GetTiersRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	return n
}

func (m *TierData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPaymentserviceTiers(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsTest {
		n += 2
	}
	if m.IsHiddenTier {
		n += 2
	}
	if m.PeriodType != 0 {
		n += 1 + sovPaymentserviceTiers(uint64(m.PeriodType))
	}
	if m.PeriodValue != 0 {
		n += 1 + sovPaymentserviceTiers(uint64(m.PeriodValue))
	}
	if m.PriceStripeUsdCents != 0 {
		n += 1 + sovPaymentserviceTiers(uint64(m.PriceStripeUsdCents))
	}
	if m.AnyNamesCountIncluded != 0 {
		n += 1 + sovPaymentserviceTiers(uint64(m.AnyNamesCountIncluded))
	}
	if m.AnyNameMinLength != 0 {
		n += 1 + sovPaymentserviceTiers(uint64(m.AnyNameMinLength))
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovPaymentserviceTiers(uint64(l))
		}
	}
	l = len(m.ColorStr)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.StripeProductId)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.StripeManageUrl)
	if l > 0 {
		n += 1 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.IosProductId)
	if l > 0 {
		n += 2 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.IosManageUrl)
	if l > 0 {
		n += 2 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.AndroidProductId)
	if l > 0 {
		n += 2 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.AndroidManageUrl)
	if l > 0 {
		n += 2 + l + sovPaymentserviceTiers(uint64(l))
	}
	l = len(m.Offer)
	if l > 0 {
		n += 2 + l + sovPaymentserviceTiers(uint64(l))
	}
	return n
}

func (m *GetTiersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovPaymentserviceTiers(uint64(l))
		}
	}
	return n
}

func sovPaymentserviceTiers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPaymentserviceTiers(x uint64) (n int) {
	return sovPaymentserviceTiers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentserviceTiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentserviceTiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTiersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentserviceTiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTiersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTiersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentserviceTiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTiersRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentserviceTiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTiersRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTiersRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentserviceTiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TierData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentserviceTiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TierData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TierData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTest = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHiddenTier", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHiddenTier = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodType", wireType)
			}
			m.PeriodType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodType |= PeriodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodValue", wireType)
			}
			m.PeriodValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStripeUsdCents", wireType)
			}
			m.PriceStripeUsdCents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceStripeUsdCents |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyNamesCountIncluded", wireType)
			}
			m.AnyNamesCountIncluded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnyNamesCountIncluded |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyNameMinLength", wireType)
			}
			m.AnyNameMinLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnyNameMinLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeManageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeManageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosManageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosManageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidManageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidManageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentserviceTiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTiersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentserviceTiers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTiersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTiersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, &TierData{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentserviceTiers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentserviceTiers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaymentserviceTiers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaymentserviceTiers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentserviceTiers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPaymentserviceTiers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPaymentserviceTiers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPaymentserviceTiers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPaymentserviceTiers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaymentserviceTiers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPaymentserviceTiers = fmt.Errorf("proto: unexpected end of group")
)
