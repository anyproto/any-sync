syntax = "proto3";
option go_package = "paymentservice/paymentserviceproto";

message Membership2 {
  enum PaymentMethod {
    MethodNone = 0;
    MethodStripe = 1;
    MethodCrypto = 2;
    MethodInappApple = 3;
    MethodInappGoogle = 4;
  }

  message Amount {
    string currency = 1;
    // $0.01 = 1
    // $1.00 = 100
    // negative amounts 
    int64 amountCents = 2;
  }

  message Product {
    // this is a unique Payment Node ID
    // adding 2 same products to a cart means we will have 2 items with same ID
    string id = 1;
    // is it a product that should be attached to a space
    bool isAttachToSpace = 2;
    // the price of a Package may not be equal to the sum of all underlying products
    bool isPackage = 3;
    // localized
    string name = 4;
    string description = 5;
  }

  message PurchaseInfo {
    uint64 dateStarted = 1;
    uint64 dateEnds = 2;
    bool isAutoRenew = 3;
    PaymentMethod paymentMethod = 4;
    // otherwise - monthly
    bool isYearly = 5;
  }

  message ProductStatus {
    enum Status {
      StatusUnknown = 0;
      StatusPending = 1;
      StatusActive = 2;
      StatusPendingRequiresFinalization = 3;
    }
    Status status = 1;

    string spaceAttachedTo = 2;
    bool isNeedsAttachmentToSpace = 3;
    bool isRenewalEnabled = 4;
  }

  message PurchasedProduct {
    Product product = 1;
    PurchaseInfo purchaseInfo = 2;
    ProductStatus productStatus = 3;
  }

  message CartProduct {
    Product product = 1;    
    // otherwise - monthly
    bool isYearly = 2;
    // set to true if you want to remove this item from the customer
    // it's like setting -1 to some product
    bool remove = 3;
  }

  message Invoice {
    enum Status {
      Unpaid = 0;
      Paid = 1;
    }
    
    string id = 1;
    uint64 date = 2;
    Amount total = 3;
    Status status = 4;
  }

  message Cart {
    // if you add Nx the same product - it will be Nx in the 'products' array, i.e:
    // each product instance has a unique index
    repeated CartProduct products = 1;
    // total amount of the cart (including discounts, etc)
    Amount total = 2;

    // in case you are paying in the middle of the period (for existing customers)
    // the next invoice amount will also be generated
    Amount totalNextInvoice = 3;
    uint64 nextInvoiceDate = 4;
  }

  message GetStatusRequest {

  }

  message GetStatusResponse {
    repeated Membership2.PurchasedProduct products = 1;
    Membership2.Invoice nextInvoice = 2;
  }

  message StoreCartGetRequest {

  }

  message StoreCartResponse {
    Membership2.Cart cart = 1;
  }

  message StoreCartPromocodeApplyRequest {
    string promocode = 1;
  }

  message StoreCartCheckoutRequest {

  }

  message StoreCartCheckoutResponse {
    // for new customers - will contain a payment URL
    // (new Stripe session)
    //
    // if this is empty - then this is existing customer
    // and we are trying to process the payment
    string paymentUrl = 1;
  }

  message StoreCartUpdateRequest {
    repeated CartProduct products = 1;
    string ownerEthAddress = 2;
  }

  message StoreCartUpdateResponse {
    Membership2.Cart cart = 1;
  }

  message StoreCartClearRequest {

  }

  message WebAuthRequest {
    
  }

  message WebAuthResponse {
    string jwt = 1;

    // (optional) redirect here after the auth
    string url = 2;
  }
}

service AnyPaymentProcessing2 {
  rpc GetStatus (Membership2.GetStatusRequest) returns (Membership2.GetStatusResponse);

  rpc StoreCartGet (Membership2.StoreCartGetRequest) returns (Membership2.StoreCartResponse);
  rpc StoreCartUpdate(Membership2.StoreCartUpdateRequest) returns (Membership2.StoreCartUpdateResponse);
  rpc StoreCartClear (Membership2.StoreCartClearRequest) returns (Membership2.StoreCartResponse);
     
  rpc StoreCartPromocodeApply (Membership2.StoreCartPromocodeApplyRequest) returns (Membership2.StoreCartResponse);
  rpc StoreCartCheckout(Membership2.StoreCartCheckoutRequest) returns (Membership2.StoreCartCheckoutResponse);

  rpc WebAuth(Membership2.WebAuthRequest) returns (Membership2.WebAuthResponse); 
}
