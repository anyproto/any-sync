syntax = "proto3";
option go_package = "nameservice/nameserviceproto";

message UserAccount {
  // An Ethereum address that owns that account
  string ownerEthAddress = 1;

  // This smart contract really controls all names
  // you can ask .owner() method to get 'ownerEthAddress'
  string ownerSmartContracWalletAddress = 2;

  // The ownerSmartContracWalletAddress field is calculated automatically
  // from ownerEthAddress even if SCW is not deployed yet
  // SCW is deployed automatically after first operation
  bool ownerSmartContracWalletDeployed = 3;

  // Number of names that the user can buy. We will mint him tokens that he can use to buy names
  // (one token per name)
  uint64 namesCountLeft = 4;

  // Number of gas operations: update name, add new data, etc
  uint64 operationsCountLeft = 5;
}

message AdminFundUserAccountRequest {
  // An Ethereum address that owns that name
  string ownerEthAddress = 1;

  // Number of names that user can buy. We will mint him tokens that he can use to buy names
  // (one token per name)
  uint64 namesCount = 2;
}

message AdminFundUserAccountRequestSigned {
  // AdminFundUserAccountRequest struct
  bytes payload = 1;

  // payload signed by Admin of this service 
  bytes signature = 2; 
}

message AdminFundGasOperationsRequest {
  // An Ethereum address that owns that name
  string ownerEthAddress = 1;

  string ownerAnyID = 2;

  // Number of gas operations: update name, add new data, etc
  uint64 operationsCount = 3;
}

message AdminFundGasOperationsRequestSigned {
  // AdminFundGasOperationsRequest struct
  bytes payload = 1;

  // payload signed by Admin of this service
  bytes signature = 2; 
}

// no signature required here
message GetUserAccountRequest {
  // An Ethereum address that owns that account
  string ownerEthAddress = 1;
}

message GetDataNameRegisterResponse {
  bytes data = 1;

  bytes context = 2;
}

message CreateUserOperationRequest { 
  bytes data = 1;

  // "data" signed with Ethereum private key
  bytes signedData = 2;

  bytes context = 3;

  string ownerEthAddress = 4;

  // in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
  // you can get it with Account().SignKey.GetPublic().Account()
  string ownerAnyID = 5;

  // all operations currently are towards single name, please specify it
  // we can use it for caching, etc purps.
  string fullName = 6;
}

message CreateUserOperationRequestSigned {
  // CreateUserOperationRequest struct
  bytes payload = 1;

  // payload signed with Anytype identity
  bytes signature = 2;
}

message NameRegisterRequest {
  string fullName = 1;

  // A content hash attached to this name
  // This should not be empty!
  // in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
  // you can get it with Account().SignKey.GetPublic().Account()
  string ownerAnyAddress = 2;
  
  // An Ethereum address that owns that name
  string ownerEthAddress = 3;

  // if false -> name ownership will belong to ownerEthAddress
  // if true -> name ownership will belong to SCW of ownerEthAddress (AccountAbstraction)
  bool registerToSmartContractWallet = 4;

  // How many months to register the name for
  uint32 registerPeriodMonths = 5;

  // Example:
  // 1 - register alice.any -> ANYID123123
  // 2 - register xxxx.any -> ANYID123123
  // reverse resolve ANYID123123 will return xxxx.any 
  //
  // TODO: currently by default "true"
  // bool updateReverseResolver = 4;
}

message NameRegisterRequestSigned {
  // NameRegisterRequest struct
  bytes payload = 1;

  // payload signed by payload.ownerEthAddress 
  bytes signature = 2; 
}

message NameRenewRequest {
  string fullName = 1;

  // A content hash attached to this name
  // This should not be empty!
  // in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
  // you can get it with Account().SignKey.GetPublic().Account()
  string ownerAnyAddress = 2;

  // An Ethereum address that owns that name
  string ownerEthAddress = 3;

  // if false -> name ownership will belong to ownerEthAddress
  // if true -> name ownership will belong to SCW of ownerEthAddress (AccountAbstraction)
  bool renewToSmartContractWallet = 4;

  // How many months to register the name for
  uint32 renewPeriodMonths = 5;
}

message NameRenewRequestSigned {
  // NameRenewRequest struct
  bytes payload = 1;

  // payload signed by payload.ownerEthAddress 
  bytes signature = 2;
}

message NameRegisterForSpaceRequest {
  string fullName = 1;

  // A content hash attached to this name
  // This should not be empty!
  // in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
  // you can get it with Account().SignKey.GetPublic().Account()
  string ownerAnyAddress = 2;
  
  // An Ethereum address that owns that name
  string ownerEthAddress = 3;

  // A SpaceID attached to this name
  string spaceId = 4;

  // How many months to register the name for
  uint32 registerPeriodMonths = 5;
}

message GetOperationStatusRequest {
  string operationId = 1;
}

enum OperationState {
  OpUnknown = 0;
  
  Pending = 1;
  PendingOrNotFound = 2;
  Completed = 3;
  Error = 4;
}

message OperationResponse {
  string operationId = 1;

  OperationState operationState = 2;
}

service AnynsAccountAbstraction {
// COMMON METHODS:
  rpc GetOperation(GetOperationStatusRequest) returns (OperationResponse) {}

// ADMIN METHODS:
  // Will send "access tokens" to the user's account (to his SmartContractWallet).
  // User will be able to use these "access tokens" to register his name later directly.
  // 
  // Blocking, will send TX to EVM chain
  // If finished without error -> please use GetUserAccount to get updated info
  rpc AdminFundUserAccount(AdminFundUserAccountRequestSigned) returns (OperationResponse) {}
  
  // Each operation is a single blockchain TX like "name update".
  // User will be able to send operations without having any gas in his wallet later
  rpc AdminFundGasOperations(AdminFundGasOperationsRequestSigned) returns (OperationResponse) {}

// USER METHODS:
  // Use it to:
  // 1 - get your SmartContractWallet address
  // 2 - get how many operations you still have
  rpc GetUserAccount(GetUserAccountRequest) returns (UserAccount) {}

  // Example usage:
  // 1. get data + context
  // 2. sign it with your Ethereum private key
  // 3. send it using CreateUserOperation
  // 4. check operation status using GetOperation
  //
  // Register new name for my Any identity
  rpc GetDataNameRegister(NameRegisterRequest) returns (GetDataNameRegisterResponse) {}

  // Register new name and attach Space ID to it
  rpc GetDataNameRegisterForSpace(NameRegisterForSpaceRequest) returns (GetDataNameRegisterResponse) {}
  
  // TODO
  //rpc GetDataNameUpdate(NameUpdateRequest) returns (GetDataNameRegisterResponse) {}

  rpc CreateUserOperation(CreateUserOperationRequestSigned) returns (OperationResponse) {}
}
