// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/nameservice/nameserviceclient (interfaces: AnyNsClientService)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_nameserviceclient.go -package=mock_nameserviceclient github.com/anyproto/any-sync/nameservice/nameserviceclient AnyNsClientService
//
// Package mock_nameserviceclient is a generated GoMock package.
package mock_nameserviceclient

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	nameserviceproto "github.com/anyproto/any-sync/nameservice/nameserviceproto"
	gomock "go.uber.org/mock/gomock"
)

// MockAnyNsClientService is a mock of AnyNsClientService interface.
type MockAnyNsClientService struct {
	ctrl     *gomock.Controller
	recorder *MockAnyNsClientServiceMockRecorder
}

// MockAnyNsClientServiceMockRecorder is the mock recorder for MockAnyNsClientService.
type MockAnyNsClientServiceMockRecorder struct {
	mock *MockAnyNsClientService
}

// NewMockAnyNsClientService creates a new mock instance.
func NewMockAnyNsClientService(ctrl *gomock.Controller) *MockAnyNsClientService {
	mock := &MockAnyNsClientService{ctrl: ctrl}
	mock.recorder = &MockAnyNsClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyNsClientService) EXPECT() *MockAnyNsClientServiceMockRecorder {
	return m.recorder
}

// AdminFundUserAccount mocks base method.
func (m *MockAnyNsClientService) AdminFundUserAccount(arg0 context.Context, arg1 *nameserviceproto.AdminFundUserAccountRequestSigned) (*nameserviceproto.OperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminFundUserAccount", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.OperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminFundUserAccount indicates an expected call of AdminFundUserAccount.
func (mr *MockAnyNsClientServiceMockRecorder) AdminFundUserAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminFundUserAccount", reflect.TypeOf((*MockAnyNsClientService)(nil).AdminFundUserAccount), arg0, arg1)
}

// AdminRegisterName mocks base method.
func (m *MockAnyNsClientService) AdminRegisterName(arg0 context.Context, arg1 *nameserviceproto.NameRegisterRequestSigned) (*nameserviceproto.OperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRegisterName", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.OperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRegisterName indicates an expected call of AdminRegisterName.
func (mr *MockAnyNsClientServiceMockRecorder) AdminRegisterName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRegisterName", reflect.TypeOf((*MockAnyNsClientService)(nil).AdminRegisterName), arg0, arg1)
}

// AdminRenewName mocks base method.
func (m *MockAnyNsClientService) AdminRenewName(arg0 context.Context, arg1 *nameserviceproto.NameRenewRequestSigned) (*nameserviceproto.OperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRenewName", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.OperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRenewName indicates an expected call of AdminRenewName.
func (mr *MockAnyNsClientServiceMockRecorder) AdminRenewName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRenewName", reflect.TypeOf((*MockAnyNsClientService)(nil).AdminRenewName), arg0, arg1)
}

// BatchGetNameByAddress mocks base method.
func (m *MockAnyNsClientService) BatchGetNameByAddress(arg0 context.Context, arg1 *nameserviceproto.BatchNameByAddressRequest) (*nameserviceproto.BatchNameByAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetNameByAddress", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.BatchNameByAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetNameByAddress indicates an expected call of BatchGetNameByAddress.
func (mr *MockAnyNsClientServiceMockRecorder) BatchGetNameByAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetNameByAddress", reflect.TypeOf((*MockAnyNsClientService)(nil).BatchGetNameByAddress), arg0, arg1)
}

// BatchGetNameByAnyId mocks base method.
func (m *MockAnyNsClientService) BatchGetNameByAnyId(arg0 context.Context, arg1 *nameserviceproto.BatchNameByAnyIdRequest) (*nameserviceproto.BatchNameByAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetNameByAnyId", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.BatchNameByAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetNameByAnyId indicates an expected call of BatchGetNameByAnyId.
func (mr *MockAnyNsClientServiceMockRecorder) BatchGetNameByAnyId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetNameByAnyId", reflect.TypeOf((*MockAnyNsClientService)(nil).BatchGetNameByAnyId), arg0, arg1)
}

// BatchIsNameAvailable mocks base method.
func (m *MockAnyNsClientService) BatchIsNameAvailable(arg0 context.Context, arg1 *nameserviceproto.BatchNameAvailableRequest) (*nameserviceproto.BatchNameAvailableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIsNameAvailable", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.BatchNameAvailableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchIsNameAvailable indicates an expected call of BatchIsNameAvailable.
func (mr *MockAnyNsClientServiceMockRecorder) BatchIsNameAvailable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsNameAvailable", reflect.TypeOf((*MockAnyNsClientService)(nil).BatchIsNameAvailable), arg0, arg1)
}

// CreateOperation mocks base method.
func (m *MockAnyNsClientService) CreateOperation(arg0 context.Context, arg1 *nameserviceproto.CreateUserOperationRequestSigned) (*nameserviceproto.OperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.OperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockAnyNsClientServiceMockRecorder) CreateOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockAnyNsClientService)(nil).CreateOperation), arg0, arg1)
}

// GetNameByAddress mocks base method.
func (m *MockAnyNsClientService) GetNameByAddress(arg0 context.Context, arg1 *nameserviceproto.NameByAddressRequest) (*nameserviceproto.NameByAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameByAddress", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.NameByAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameByAddress indicates an expected call of GetNameByAddress.
func (mr *MockAnyNsClientServiceMockRecorder) GetNameByAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameByAddress", reflect.TypeOf((*MockAnyNsClientService)(nil).GetNameByAddress), arg0, arg1)
}

// GetNameByAnyId mocks base method.
func (m *MockAnyNsClientService) GetNameByAnyId(arg0 context.Context, arg1 *nameserviceproto.NameByAnyIdRequest) (*nameserviceproto.NameByAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameByAnyId", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.NameByAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameByAnyId indicates an expected call of GetNameByAnyId.
func (mr *MockAnyNsClientServiceMockRecorder) GetNameByAnyId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameByAnyId", reflect.TypeOf((*MockAnyNsClientService)(nil).GetNameByAnyId), arg0, arg1)
}

// GetOperation mocks base method.
func (m *MockAnyNsClientService) GetOperation(arg0 context.Context, arg1 *nameserviceproto.GetOperationStatusRequest) (*nameserviceproto.OperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.OperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockAnyNsClientServiceMockRecorder) GetOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockAnyNsClientService)(nil).GetOperation), arg0, arg1)
}

// GetUserAccount mocks base method.
func (m *MockAnyNsClientService) GetUserAccount(arg0 context.Context, arg1 *nameserviceproto.GetUserAccountRequest) (*nameserviceproto.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccount", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccount indicates an expected call of GetUserAccount.
func (mr *MockAnyNsClientServiceMockRecorder) GetUserAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccount", reflect.TypeOf((*MockAnyNsClientService)(nil).GetUserAccount), arg0, arg1)
}

// Init mocks base method.
func (m *MockAnyNsClientService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAnyNsClientServiceMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAnyNsClientService)(nil).Init), arg0)
}

// IsNameAvailable mocks base method.
func (m *MockAnyNsClientService) IsNameAvailable(arg0 context.Context, arg1 *nameserviceproto.NameAvailableRequest) (*nameserviceproto.NameAvailableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNameAvailable", arg0, arg1)
	ret0, _ := ret[0].(*nameserviceproto.NameAvailableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNameAvailable indicates an expected call of IsNameAvailable.
func (mr *MockAnyNsClientServiceMockRecorder) IsNameAvailable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNameAvailable", reflect.TypeOf((*MockAnyNsClientService)(nil).IsNameAvailable), arg0, arg1)
}

// Name mocks base method.
func (m *MockAnyNsClientService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAnyNsClientServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAnyNsClientService)(nil).Name))
}
