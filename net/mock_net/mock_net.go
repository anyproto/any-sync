// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/net (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination mock_net/mock_net.go github.com/anyproto/any-sync/net Service
//
// Package mock_net is a generated GoMock package.
package mock_net

import (
	context "context"
	net "net"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	server "github.com/anyproto/any-sync/net/internal/rpc/server"
	streampool "github.com/anyproto/any-sync/net/internal/streampool"
	peer "github.com/anyproto/any-sync/net/peer"
	streampool0 "github.com/anyproto/any-sync/net/streampool"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockService) Get(arg0 context.Context, arg1 string) (peer.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(peer.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), arg0, arg1)
}

// GetDrpcServer mocks base method.
func (m *MockService) GetDrpcServer() server.DRPCServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrpcServer")
	ret0, _ := ret[0].(server.DRPCServer)
	return ret0
}

// GetDrpcServer indicates an expected call of GetDrpcServer.
func (mr *MockServiceMockRecorder) GetDrpcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrpcServer", reflect.TypeOf((*MockService)(nil).GetDrpcServer))
}

// GetOneOf mocks base method.
func (m *MockService) GetOneOf(arg0 context.Context, arg1 []string) (peer.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOf", arg0, arg1)
	ret0, _ := ret[0].(peer.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOf indicates an expected call of GetOneOf.
func (mr *MockServiceMockRecorder) GetOneOf(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOf", reflect.TypeOf((*MockService)(nil).GetOneOf), arg0, arg1)
}

// Init mocks base method.
func (m *MockService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServiceMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockService)(nil).Init), arg0)
}

// Inject mocks base method.
func (m *MockService) Inject(arg0 *app.App) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inject", arg0)
}

// Inject indicates an expected call of Inject.
func (mr *MockServiceMockRecorder) Inject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockService)(nil).Inject), arg0)
}

// ListenAddrs mocks base method.
func (m *MockService) ListenAddrs(arg0 context.Context, arg1 ...string) ([]net.Addr, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListenAddrs", varargs...)
	ret0, _ := ret[0].([]net.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenAddrs indicates an expected call of ListenAddrs.
func (mr *MockServiceMockRecorder) ListenAddrs(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAddrs", reflect.TypeOf((*MockService)(nil).ListenAddrs), varargs...)
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}

// NewStreamPool mocks base method.
func (m *MockService) NewStreamPool(arg0 streampool.StreamHandler, arg1 streampool0.StreamConfig) streampool0.StreamPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStreamPool", arg0, arg1)
	ret0, _ := ret[0].(streampool0.StreamPool)
	return ret0
}

// NewStreamPool indicates an expected call of NewStreamPool.
func (mr *MockServiceMockRecorder) NewStreamPool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStreamPool", reflect.TypeOf((*MockService)(nil).NewStreamPool), arg0, arg1)
}

// PreferQuic mocks base method.
func (m *MockService) PreferQuic(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PreferQuic", arg0)
}

// PreferQuic indicates an expected call of PreferQuic.
func (mr *MockServiceMockRecorder) PreferQuic(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreferQuic", reflect.TypeOf((*MockService)(nil).PreferQuic), arg0)
}

// SetPeerAddrs mocks base method.
func (m *MockService) SetPeerAddrs(arg0 string, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPeerAddrs", arg0, arg1)
}

// SetPeerAddrs indicates an expected call of SetPeerAddrs.
func (mr *MockServiceMockRecorder) SetPeerAddrs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPeerAddrs", reflect.TypeOf((*MockService)(nil).SetPeerAddrs), arg0, arg1)
}
