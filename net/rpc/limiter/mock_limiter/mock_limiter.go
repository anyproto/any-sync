// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync/net/rpc/limiter (interfaces: RpcLimiter)
//
// Generated by this command:
//
//	mockgen -destination mock_limiter/mock_limiter.go github.com/anyproto/any-sync/net/rpc/limiter RpcLimiter
//
// Package mock_limiter is a generated GoMock package.
package mock_limiter

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
	drpc "storj.io/drpc"
)

// MockRpcLimiter is a mock of RpcLimiter interface.
type MockRpcLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRpcLimiterMockRecorder
}

// MockRpcLimiterMockRecorder is the mock recorder for MockRpcLimiter.
type MockRpcLimiterMockRecorder struct {
	mock *MockRpcLimiter
}

// NewMockRpcLimiter creates a new mock instance.
func NewMockRpcLimiter(ctrl *gomock.Controller) *MockRpcLimiter {
	mock := &MockRpcLimiter{ctrl: ctrl}
	mock.recorder = &MockRpcLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcLimiter) EXPECT() *MockRpcLimiterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRpcLimiter) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRpcLimiterMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRpcLimiter)(nil).Close), arg0)
}

// Init mocks base method.
func (m *MockRpcLimiter) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRpcLimiterMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRpcLimiter)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockRpcLimiter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRpcLimiterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRpcLimiter)(nil).Name))
}

// Run mocks base method.
func (m *MockRpcLimiter) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRpcLimiterMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRpcLimiter)(nil).Run), arg0)
}

// WrapDRPCHandler mocks base method.
func (m *MockRpcLimiter) WrapDRPCHandler(arg0 drpc.Handler) drpc.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapDRPCHandler", arg0)
	ret0, _ := ret[0].(drpc.Handler)
	return ret0
}

// WrapDRPCHandler indicates an expected call of WrapDRPCHandler.
func (mr *MockRpcLimiterMockRecorder) WrapDRPCHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapDRPCHandler", reflect.TypeOf((*MockRpcLimiter)(nil).WrapDRPCHandler), arg0)
}
